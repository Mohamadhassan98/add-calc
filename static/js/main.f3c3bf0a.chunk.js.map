{"version":3,"sources":["serviceWorker.js","Globals.js","Styles.js","Pages/Add.js","index.js"],"names":["Boolean","window","location","hostname","match","trim","s","c","replace","RegExp","nextInt","min","max","Math","floor","random","nextId","toString","NumButton","withStyles","theme","root","width","height","margin","Button","BackspaceButton","backgroundColor","PlusButton","EqualsButton","Input","padding","TextField","AddCalc","props","wrong","resetInputs","state","result","setState","inputs","minus","onNumPressed","number","input","onZeroPressed","onDecimalPointPressed","includes","onBackspacePressed","length","substring","clearState","loading","longPressed","backspacePress","longPress","setTimeout","backspaceRelease","clearTimeout","trimInput","charAt","onPlusPressed","isZero","onEqualsPressed","event","actualInput","anchorEl","currentTarget","trimmedInput","showResponse","equation","response","data","showError","onLinkChose","method","url","staticUrl","split","i","axios","get","then","catch","ids","nextId1","push","formData","FormData","IDs","append","post","closeMenu","toggleMinus","string","char","Fragment","style","marginTop","Container","maxWidth","Grid","container","alignItems","direction","justify","item","xl","variant","onClick","Tooltip","title","placement","onMouseDown","this","onMouseUp","InputProps","readOnly","startAdornment","InputAdornment","position","endAdornment","IconButton","fullWidth","id","label","name","value","aria-controls","aria-haspopup","Menu","keepMounted","open","onClose","ListSubheader","Divider","MenuItem","disabled","CircularProgress","size","rowsMax","helperText","error","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3c3bf0a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\r\n * Trims the s param, trailed by c param. More formally, removes all `c`s from end of `s` so that `++c++` becomes `++c` after calling trim('++c++', '+');\r\n * @param s the string to trim\r\n * @param c the character to remove\r\n * @returns {void | string}\r\n */\r\nexport function trim(s, c) {\r\n    if (c === \"]\") c = \"\\\\]\";\r\n    if (c === \"\\\\\") c = \"\\\\\\\\\";\r\n    return s.replace(new RegExp(\r\n        \"[\" + c + \"]+$\", \"g\"\r\n    ), \"\");\r\n}\r\n\r\n/**\r\n * Counts occurrence of char in string.\r\n * @param string\r\n * @param char\r\n * @returns {number}\r\n */\r\nexport function countOccurrence(string, char) {\r\n    const split = string.toString().split(char);\r\n    return split.length - 1;\r\n}\r\n\r\nfunction nextInt(min = 10, max = 35) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function nextId() {\r\n    return `${nextInt().toString(36)}${nextInt().toString(36)}`;\r\n}\r\n","import withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\nexport const NumButton = withStyles(theme => ({\r\n    root: {\r\n        width: '64px',\r\n        height: '64px',\r\n        margin: '5px'\r\n    }\r\n}))(Button);\r\n\r\nexport const BackspaceButton = withStyles(theme => ({\r\n    root: {\r\n        width: '64px',\r\n        height: '64px',\r\n        margin: '5px',\r\n        backgroundColor: 'crimson',\r\n        '&:hover': {\r\n            backgroundColor: '#B22222'\r\n        }\r\n    }\r\n}))(Button);\r\n\r\nexport const PlusButton = withStyles(theme => ({\r\n    root: {\r\n        width: '64px',\r\n        height: '138px',\r\n        margin: '5px',\r\n        backgroundColor: 'cyan'\r\n    }\r\n}))(Button);\r\n\r\nexport const EqualsButton = withStyles(theme => ({\r\n    root: {\r\n        width: '138px',\r\n        height: '64px',\r\n        margin: '5px',\r\n        backgroundColor: 'green'\r\n    }\r\n}))(Button);\r\n\r\nexport const Input = withStyles(theme => ({\r\n    root: {\r\n        margin: '2.5px',\r\n        padding: '2.5px'\r\n    }\r\n}))(TextField);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Container, ListSubheader, Tooltip} from \"@material-ui/core\";\r\nimport {countOccurrence, nextId, trim} from \"../Globals\";\r\nimport {BackspaceButton, EqualsButton, Input, NumButton, PlusButton} from \"../Styles\";\r\nimport BackspaceIcon from '@material-ui/icons/Backspace';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ExposureIcon from '@material-ui/icons/Exposure';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport axios from 'axios';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\r\n\r\n\r\nexport default class AddCalc extends React.Component {\r\n    /**\r\n     * Message to show when server does not respond correctly.\r\n     */\r\n    wrong = 'Something went wrong';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**\r\n             * Show minus in input and control negative input insertion.\r\n             */\r\n            minus: false,\r\n            /**\r\n             * Current input inserted.\r\n             */\r\n            input: '0',\r\n            /**\r\n             * Current equation, formally some inputs followed by `+` operator.\r\n             */\r\n            inputs: '0',\r\n            /**\r\n             * Controls if app is in show result state.\r\n             */\r\n            result: false,\r\n            anchorEl: null,\r\n            /**\r\n             * Controls showing loading when server request is sent.\r\n             */\r\n            loading: false,\r\n            /**\r\n             * The message to show when the server responds. Default is blank.\r\n             * @see wrong\r\n             */\r\n            wrong: ''\r\n        };\r\n    }\r\n\r\n    /**\r\n     * If app is in show result state, resets the other states to default.\r\n     */\r\n    resetInputs = () => {\r\n        if (this.state.result) {\r\n            this.setState({\r\n                result: false,\r\n                inputs: '0',\r\n                minus: false,\r\n                wrong: ''\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invoked when any number buttons are pressed. Updates the current input accordingly.\r\n     * @param number the number that is pressed\r\n     */\r\n    onNumPressed = (number) => {\r\n        this.resetInputs();\r\n        if (this.state.input === '0') {\r\n            this.setState({\r\n                input: number\r\n            });\r\n        } else {\r\n            this.setState({\r\n                input: `${this.state.input}${number}`\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invokes when `0` is pressed. If the current input is `0` already, does nothing. Else invokes onNumPressed with\r\n     * `0` input.\r\n     * @see onNumPressed\r\n     */\r\n    onZeroPressed = () => {\r\n        this.resetInputs();\r\n        if (this.state.input !== '0') {\r\n            this.onNumPressed(0);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invoked when decimal point (`.`) button is pressed. Makes sure that there is no more than one decimal points\r\n     * present in current input.\r\n     */\r\n    onDecimalPointPressed = () => {\r\n        this.resetInputs();\r\n        if (!this.state.input.toString().includes('.')) {\r\n            this.setState({\r\n                input: `${this.state.input}.`\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invokes when backspace button is pressed shortly. Removes one digit from current input (if present any).\r\n     * @see backspacePress\r\n     * @see backspaceRelease\r\n     * @see clearState\r\n     */\r\n    onBackspacePressed = () => {\r\n        this.resetInputs();\r\n        if (this.state.input.length > 1) {\r\n            let input = this.state.input;\r\n            input = input.substring(0, input.length - 1);\r\n            this.setState({\r\n                input: input\r\n            });\r\n        } else if (this.state.input !== '0') {\r\n            this.setState({\r\n                input: '0'\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invoked when backspace button is long pressed. Clears the current input and all previously inserted inputs.\r\n     * @see backspacePress\r\n     * @see backspaceRelease\r\n     * @see onBackspacePressed\r\n     */\r\n    clearState = () => {\r\n        this.setState({\r\n            inputs: '0',\r\n            input: '0',\r\n            result: false,\r\n            loading: false,\r\n            minus: false,\r\n            wrong: ''\r\n        });\r\n        this.longPressed = true;\r\n    };\r\n\r\n    /**\r\n     * Invoked when backspace button is started to press.\r\n     */\r\n    backspacePress = () => {\r\n        this.longPress = setTimeout(this.clearState, 1000);\r\n    };\r\n\r\n    /**\r\n     * Invoked when backspace button is released.\r\n     */\r\n    backspaceRelease = () => {\r\n        clearTimeout(this.longPress);\r\n        if (!this.longPressed) {\r\n            this.onBackspacePressed();\r\n        }\r\n        this.longPressed = false;\r\n    };\r\n\r\n    /**\r\n     * Trims input, making sure that there are no trailing `0`s after decimal point. Also trims the decimal point\r\n     * itself, if the last input digit is decimal point (after `0`s are trimmed).\r\n     * @param input the input to trim\r\n     * @returns {*} the trimmed input\r\n     */\r\n    trimInput = (input) => {\r\n        if (input.includes('.')) {\r\n            input = trim(input, '0');\r\n        }\r\n        if (input.charAt(input.length - 1) === '.') {\r\n            input = trim(input, '.');\r\n        }\r\n        return input;\r\n    };\r\n\r\n    /**\r\n     * Invoked when plus button is pressed. Appends current input to previously inserted inputs.\r\n     */\r\n    onPlusPressed = () => {\r\n        this.resetInputs();\r\n        const input = this.trimInput(this.state.input.toString());\r\n        const isZero = input === '0';\r\n        this.setState({\r\n            inputs: `${this.state.inputs === '0' ? '' : this.state.inputs}${this.state.minus && !isZero ? '(-' : ''}${input}${this.state.minus && !isZero ? ')' : ''}+`,\r\n            input: '0',\r\n            minus: false\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Invoked when equals button is pressed. Shows the result if there are no equations present (i.e. for example 2=2\r\n     * is not requested from server.) and server links to request from, otherwise.\r\n     * @param event\r\n     */\r\n    onEqualsPressed = (event) => {\r\n        if (this.state.inputs !== '0' && !this.state.result) {\r\n            this.setState({\r\n                anchorEl: event.currentTarget\r\n            });\r\n        } else if (this.state.result) {\r\n            this.resetInputs();\r\n        } else {\r\n            this.setState({\r\n                inputs: this.actualInput(this.state.input.toString()),\r\n                input: '0',\r\n                minus: false,\r\n                result: true\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the actual value of current input, removing trailing zeros (and decimal point) and adding (-) if necessary.\r\n     * @param input\r\n     * @returns {string}\r\n     */\r\n    actualInput = (input) => {\r\n        const trimmedInput = this.trimInput(input);\r\n        const isZero = trimmedInput === '0';\r\n        return `${this.state.minus && !isZero ? '(-' : ''}${trimmedInput}${this.state.minus && !isZero ? ')' : ''}`;\r\n    };\r\n\r\n    /**\r\n     * Shows the received response from server.\r\n     * @param equation\r\n     * @param response\r\n     */\r\n    showResponse = (equation, response) => {\r\n        const result = response.data.result.toString().charAt(0) === '-' ? `(${response.data.result})` : response.data.result;\r\n        this.setState({\r\n            loading: false,\r\n            inputs: `${equation}=${result}`,\r\n            result: true,\r\n            input: '0',\r\n            minus: false\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Shows the error message when server sends inappropriate response.\r\n     * @param equation\r\n     */\r\n    showError = (equation) => {\r\n        this.setState({\r\n            loading: false,\r\n            wrong: this.wrong,\r\n            result: true,\r\n            inputs: equation,\r\n            input: '0',\r\n            minus: false\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Request current equation from selected server, according to method param sent to this function and shows the result or error from server.\r\n     * @param method a number between 1..3 showing the method selected by user\r\n     */\r\n    onLinkChose = (method) => {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        const staticUrl = \"https://django-test-ui-project.fandogh.cloud/math/add\";\r\n        const equation = `${this.state.inputs}${this.actualInput(this.state.input.toString())}`;\r\n        const inputs = equation.toString().split('+');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            if (inputs[i].includes('(')) {\r\n                inputs[i] = inputs[i].substring(1, inputs[i].length - 1);\r\n            }\r\n        }\r\n        let url;\r\n        switch (method) {\r\n            case 1:\r\n                url = `/${inputs[0]}/${inputs[1]}`;\r\n                axios.get(`${staticUrl}${url}`).then(response => {\r\n                    this.showResponse(equation, response);\r\n                }).catch(() => {\r\n                    this.showError(equation);\r\n                });\r\n                break;\r\n            case 2:\r\n                url = '?';\r\n                const ids = [];\r\n                for (let i = 0; i < inputs.length; i++) {\r\n                    const nextId1 = nextId();\r\n                    if (!ids.includes(nextId1)) {\r\n                        ids.push(nextId1);\r\n                        url += `${nextId1}=${inputs[i]}&`;\r\n                    } else {\r\n                        i--;\r\n                    }\r\n                }\r\n                url = trim(url, '&');\r\n                axios.get(`${staticUrl}${url}`).then(response => {\r\n                    this.showResponse(equation, response);\r\n                }).catch(() => {\r\n                    this.showError(equation);\r\n                });\r\n                break;\r\n            case 3:\r\n                const formData = new FormData();\r\n                const IDs = [];\r\n                for (let i = 0; i < inputs.length; i++) {\r\n                    const nextId1 = nextId();\r\n                    if (!IDs.includes(nextId1)) {\r\n                        IDs.push(nextId1);\r\n                        formData.append(nextId1, inputs[i]);\r\n                    } else {\r\n                        i--;\r\n                    }\r\n                }\r\n                axios.post(`${staticUrl}/`, formData).then(response => {\r\n                    this.showResponse(equation, response);\r\n                }).catch(() => {\r\n                    this.showError(equation);\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.closeMenu();\r\n    };\r\n\r\n    /**\r\n     * Toggles the minus in current input.\r\n     */\r\n    toggleMinus = () => {\r\n        this.setState({\r\n            minus: !this.state.minus\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Closes the available server links, shown by pressing equals button.\r\n     * @see onEqualsPressed\r\n     */\r\n    closeMenu = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <main style={{\r\n                    marginTop: '50px'\r\n                }}>\r\n                    <Container maxWidth='xl'>\r\n                        <Grid container alignItems='center' direction='column' justify='center'>\r\n                            <Grid item xl>\r\n                                <Grid container direction='row'>\r\n                                    <Grid item>\r\n                                        <NumButton variant='contained'\r\n                                                   onClick={() => this.onNumPressed(9)}>9</NumButton>\r\n                                        <NumButton variant='contained'\r\n                                                   onClick={() => this.onNumPressed(8)}>8</NumButton>\r\n                                        <NumButton variant='contained'\r\n                                                   onClick={() => this.onNumPressed(7)}>7</NumButton>\r\n                                        <Tooltip title='Hold to clean' placement='top'>\r\n                                            <BackspaceButton variant='contained' onMouseDown={this.backspacePress}\r\n                                                             onMouseUp={this.backspaceRelease}>\r\n                                                <BackspaceIcon/><DeleteSweepIcon/>\r\n                                            </BackspaceButton>\r\n                                        </Tooltip>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Input\r\n                                            InputProps={{\r\n                                                style: {\r\n                                                    width: '286px',\r\n                                                    height: '64px'\r\n                                                },\r\n                                                readOnly: true,\r\n                                                startAdornment: <InputAdornment\r\n                                                    position=\"start\">{this.state.minus ? '-' : ' '}</InputAdornment>,\r\n                                                endAdornment: <InputAdornment position='end'>\r\n                                                    <IconButton onClick={this.toggleMinus}>\r\n                                                        <ExposureIcon/>\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }}\r\n                                            variant='outlined'\r\n                                            fullWidth\r\n                                            id={'input'}\r\n                                            label={'input'}\r\n                                            name={'input'}\r\n                                            value={this.state.input}/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xl>\r\n                                <Grid container direction='row'>\r\n                                    <Grid item>\r\n                                        <Grid container direction='column'>\r\n                                            <Grid item>\r\n                                                <Grid container direction='row'>\r\n                                                    <Grid item>\r\n                                                        <Grid container direction='column'>\r\n                                                            <Grid item>\r\n                                                                <NumButton variant='contained'\r\n                                                                           onClick={() => this.onNumPressed(6)}>6</NumButton>\r\n                                                                <NumButton variant='contained'\r\n                                                                           onClick={() => this.onNumPressed(5)}>5</NumButton>\r\n                                                                <NumButton variant='contained'\r\n                                                                           onClick={() => this.onNumPressed(4)}>4</NumButton>\r\n                                                            </Grid>\r\n                                                            <Grid item>\r\n                                                                <NumButton variant='contained'\r\n                                                                           onClick={() => this.onNumPressed(3)}>3</NumButton>\r\n                                                                <NumButton variant='contained'\r\n                                                                           onClick={() => this.onNumPressed(2)}>2</NumButton>\r\n                                                                <NumButton variant='contained'\r\n                                                                           onClick={() => this.onNumPressed(1)}>1</NumButton>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <PlusButton variant='contained'\r\n                                                                    onClick={this.onPlusPressed}>+</PlusButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Grid container direction='row'>\r\n                                                    <Grid item>\r\n                                                        <NumButton variant='contained'\r\n                                                                   onClick={this.onZeroPressed}>0</NumButton>\r\n                                                        <NumButton variant='contained'\r\n                                                                   onClick={this.onDecimalPointPressed}>.</NumButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <EqualsButton variant='contained'\r\n                                                                      aria-controls=\"choose-link\"\r\n                                                                      onClick={this.onEqualsPressed}\r\n                                                                      aria-haspopup=\"true\"\r\n                                                        >=</EqualsButton>\r\n                                                        <Menu\r\n                                                            id=\"choose-link\"\r\n                                                            anchorEl={this.state.anchorEl}\r\n                                                            keepMounted\r\n                                                            open={Boolean(this.state.anchorEl)}\r\n                                                            onClose={this.closeMenu}\r\n                                                        >\r\n                                                            <ListSubheader>choose url and/or method</ListSubheader>\r\n                                                            <Divider/>\r\n                                                            <MenuItem onClick={() => this.onLinkChose(1)}\r\n                                                                      disabled={countOccurrence(this.state.inputs ? this.state.inputs.toString() : ' ', '+') > 1}>get:\r\n                                                                /math/add/a/b</MenuItem>\r\n                                                            <MenuItem onClick={() => this.onLinkChose(2)}>get:\r\n                                                                /math/add?a=a&b=b</MenuItem>\r\n                                                            <MenuItem onClick={() => this.onLinkChose(3)}>post:\r\n                                                                /math/add/</MenuItem>\r\n                                                        </Menu>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Input\r\n                                            InputProps={{\r\n                                                style: {\r\n                                                    width: '286px',\r\n                                                    height: '212px'\r\n                                                },\r\n                                                readOnly: true,\r\n                                                endAdornment: <InputAdornment position='end'>\r\n                                                    {this.state.loading && <CircularProgress size={200}/>}\r\n                                                </InputAdornment>\r\n                                            }}\r\n                                            disabled={this.state.loading}\r\n                                            rowsMax={4}\r\n                                            variant='outlined'\r\n                                            fullWidth\r\n                                            id={'inputs'}\r\n                                            label={'Inputs'}\r\n                                            name={'inputs'}\r\n                                            helperText={this.state.wrong}\r\n                                            error={this.state.wrong !== ''}\r\n                                            value={this.state.inputs}/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AddCalc from './Pages/Add';\n\nReactDOM.render(<AddCalc/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}